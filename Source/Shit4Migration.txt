// shared language model object that stores our phrase-term probability database
FastLM gLanguageModelCHT;
FastLM gLanguageModelCHS;
FastLM gUserPhraseLanguageModelCHT;
FastLM gUserPhraseLanguageModelCHS;

static const int kUserOverrideModelCapacity = 500;
static const double kObservedOverrideHalflife = 5400.0;  // 1.5 hr.
vChewing::UserOverrideModel gUserOverrideModelCHT(kUserOverrideModelCapacity, kObservedOverrideHalflife);
vChewing::UserOverrideModel gUserOverrideModelCHS(kUserOverrideModelCapacity, kObservedOverrideHalflife);

static NSString *LTUserDataFolderPath()
{
    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSApplicationSupportDirectory, NSUserDirectory, YES);
    NSString *appSupportPath = [paths objectAtIndex:0];
    NSString *userDictPath = [appSupportPath stringByAppendingPathComponent:@"vChewing"];
    return userDictPath;
}

static NSString *LTUserPhrasesDataPathCHT()
{
    return [LTUserDataFolderPath() stringByAppendingPathComponent:@"userdata-cht.txt"];
}

static NSString *LTUserPhrasesDataPathCHS()
{
    return [LTUserDataFolderPath() stringByAppendingPathComponent:@"userdata-chs.txt"];
}

static BOOL LTCheckIfUserLanguageModelFileExists() {

    NSString *folderPath = LTUserDataFolderPath();
    BOOL isFolder = NO;
    BOOL folderExist = [[NSFileManager defaultManager] fileExistsAtPath:folderPath isDirectory:&isFolder];
    if (folderExist && !isFolder) {
        NSError *error = nil;
        [[NSFileManager defaultManager] removeItemAtPath:folderPath error:&error];
        if (error) {
            NSLog(@"Failed to remove folder %@", error);
            return NO;
        }
        folderExist = NO;
    }
    if (!folderExist) {
        NSError *error = nil;
        [[NSFileManager defaultManager] createDirectoryAtPath:folderPath withIntermediateDirectories:YES attributes:nil error:&error];
        if (error) {
            NSLog(@"Failed to create folder %@", error);
            return NO;
        }
    }
    NSString *filePathCHS = LTUserPhrasesDataPathCHS();
    if (![[NSFileManager defaultManager] fileExistsAtPath:filePathCHS]) {
        BOOL result = [[@"" dataUsingEncoding:NSUTF8StringEncoding] writeToFile:filePathCHS atomically:YES];
        if (!result) {
            NSLog(@"Failed to write userdict CHS file");
            return NO;
        }
    }
    NSString *filePathCHT = LTUserPhrasesDataPathCHT();
    if (![[NSFileManager defaultManager] fileExistsAtPath:filePathCHT]) {
        BOOL result = [[@"" dataUsingEncoding:NSUTF8StringEncoding] writeToFile:filePathCHT atomically:YES];
        if (!result) {
            NSLog(@"Failed to write userdict CHT file");
            return NO;
        }
    }
    return YES;
}


